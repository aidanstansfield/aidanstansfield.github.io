<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://aidanstansfield.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aidanstansfield.github.io/" rel="alternate" type="text/html" /><updated>2020-03-30T10:26:33+10:00</updated><id>https://aidanstansfield.github.io/feed.xml</id><title type="html">Aidan’s Blog</title><subtitle>G'day, I'm Aidan and I like to make things, almost as much as I like to break things. In this blog you can expect to find writeups of various home/personal projects, as well as hackthebox/ctf writeups. Hope you enjoy!</subtitle><entry><title type="html">The Raspberry Pi Project: Part 2 - Web Server</title><link href="https://aidanstansfield.github.io/2020/03/15/raspi-p2.html" rel="alternate" type="text/html" title="The Raspberry Pi Project: Part 2 - Web Server" /><published>2020-03-15T16:25:00+10:00</published><updated>2020-03-15T16:25:00+10:00</updated><id>https://aidanstansfield.github.io/2020/03/15/raspi-p2</id><content type="html" xml:base="https://aidanstansfield.github.io/2020/03/15/raspi-p2.html">&lt;p&gt;So as I mentioned in my &lt;a href=&quot;/2020/03/14/raspi-p1.html&quot;&gt;previous post&lt;/a&gt;, I wanted to use my Raspberry Pi as a webserver so that I could play around with web development projects. More specifically, I wanted to run NGINX, with autogenerated SSL certs from Let’s Encrypt, and I wanted a Dynamic DNS address so that I didn’t have to deal with changing IP addresses provided by my ISP. Oh, and I wanted this to all be described by one simple &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;installing-prerequisites&quot;&gt;Installing Prerequisites&lt;/h2&gt;
&lt;p&gt;First things first, you’ll need to get a Raspberry Pi up and running with Raspbian. There’s plenty of guides on this so if you have know idea, do some googling.&lt;/p&gt;

&lt;p&gt;Next, we need to install Docker &amp;amp; Docker Compose. We’ll start with Docker.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -fsSL get.docker.com -o get-docker.sh &amp;amp;&amp;amp; sh get-docker.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I’d recommend adding yourself to the Docker group so that you don’t have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; every time you want to run a Docker command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo usermod -aG docker pi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, update your packages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we shall enable the Docker service so that it automatically starts up on boot.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Last but not least, let’s install docker-compose&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;T
o make sure everything is working properly, let’s run the infamous &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-world&lt;/code&gt; container!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see Docker look for the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-world&lt;/code&gt; container locally, fail to find it, pull it from the Docker Registry, run it and then display the result in the terminal! If you see this, your Docker installation is working!&lt;/p&gt;

&lt;h2 id=&quot;docker--docker-compose&quot;&gt;Docker &amp;amp; Docker Compose&lt;/h2&gt;
&lt;p&gt;So what is Docker? Well, I won’t regurgitate what 1000 other blogs have already explained far better than I ever could, so instead, here’s the TLDR:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Docker lets you package apps and all their dependencies into ‘containers’ that can be downloaded and run on any platform that supports Docker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Docker Compose?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Docker compose lets you write down how to run a container(s), so that you don’t have to write it all out in the command line every time you wanna boot it up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s more complicated than that, but if you want to find out more, I won’t stop you.&lt;/p&gt;

&lt;p&gt;So rather then explain how Docker Compose files work in general, I figured I’d walk you through my &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file, because I learn best from examples!&lt;/p&gt;

&lt;h2 id=&quot;duckdns&quot;&gt;DuckDNS&lt;/h2&gt;
&lt;p&gt;So here is a snippet of my compose file that I use to build my web server. This part in particular is used to run my DuckDNS client, so that my dynamic DNS address will always stay up to date. It’s a fairly straight forward example, so let’s take a look.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;duckdns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;linuxserver/duckdns:arm32v7-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;duckdns&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Australia/Brisbane&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${DUCKDNS_TOKEN}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SUBDOMAINS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;deluqs'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PUID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;GUID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;LOG_FILE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./duckdns/config:/config'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unless-stopped&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start with, I declare which version of docker-compose I am using. At the time of writing, 3 is the latest, so that is what I am using. Next I declare the services I want to run, which in this case, is just one service I’ve called ‘duckdns’.&lt;/p&gt;

&lt;p&gt;I then tell Docker to use the ‘linuxserver/duckdns:arm32v7-latest’ image, which just describes which container I want to run. More specifically, look for the ‘duckdns’ image by the Docker Hub account ‘linuxserver’, with the tag ‘arm32v7-latest’. Note that it is important to declare the use of the ‘arm32v7-latest’ tag, since the Raspberry Pi 4 runs on arm32v7 architecture. Remember this, because I will bring it up again later.&lt;/p&gt;

&lt;p&gt;Next I give the container the name ‘duckdns’, as well as a bunch of environment variables. To see the explanation behind each of these environment variables, see the &lt;a href=&quot;https://hub.docker.com/r/linuxserver/duckdns/&quot;&gt;linuxserver/duckdns documentation&lt;/a&gt;. It is also worth noting that in the same directory as the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file, I have a .env file that contains my &lt;code class=&quot;highlighter-rouge&quot;&gt;DUCKDNS_TOKEN&lt;/code&gt;, which will get substituted in at runtime.&lt;/p&gt;

&lt;p&gt;Next, I tell Docker to mount the &lt;code class=&quot;highlighter-rouge&quot;&gt;/config&lt;/code&gt; folder within the duckdns container to the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;./duckdns/config&lt;/code&gt; on my Pi. This allows me to easily see the duck.log file from the host, as it gets written to &lt;code class=&quot;highlighter-rouge&quot;&gt;/config/duck.log&lt;/code&gt; within the container.&lt;/p&gt;

&lt;p&gt;Finally, I make sure that the container always restarts, unless I’ve manually stopped it. This makes sure that it will automatically start on boot.&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;NGINX&lt;/h2&gt;
&lt;p&gt;Next, the container I use to run NGINX.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;duckdns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nginx-proxy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aidanstansfield/nginx-proxy:arm32v7&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-proxy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unless-stopped&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80:80&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;443:443&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/docker.sock:/tmp/docker.sock:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;certs:/etc/nginx/certs:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vhost:/etc/nginx/vhost.d&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;html:/usr/share/nginx/html&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;conf:/etc/nginx/conf.d&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dhparam:/etc/nginx/dhparam&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEFAULT_HOST&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;deluqs.duckdns.org&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vhost&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dhparam&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;certs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, there’s a couple of differences between this and the DuckDNS example above. The most obvious one, is that it’s a different image (duh). The &lt;a href=&quot;https://github.com/aidanstansfield/nginx-proxy&quot;&gt;image&lt;/a&gt; I’m using is a customized version of &lt;a href=&quot;https://github.com/nginx-proxy/nginx-proxy&quot;&gt;jwilder’s nginx-proxy&lt;/a&gt; that I built myself, with support for the arm32v7 architecture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: I plan on doing a blog post on why and how I built this container in the future, so keep your eyes peeled!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you aren’t familiar with &lt;a href=&quot;https://github.com/nginx-proxy/nginx-proxy&quot;&gt;jwilder’s nginx-proxy&lt;/a&gt;, what it does is observe the Docker containers you run, and if any have the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;VIRTUAL_HOST&lt;/code&gt;, it will automagically setup an NGINX proxy and point it to that container!&lt;/p&gt;

&lt;p&gt;For instance, say I spin up a container of some kind that serves web content out of port 80. If I add the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;VIRTUAL_HOST: &quot;deluqs.duckdns.org&quot;&lt;/code&gt; to that service, then NGINX will see that and setup the necessary config files to proxy any requests for the host “deluqs.duckdns.org” to port 80 within that container. See the pieces starting to come together?&lt;/p&gt;

&lt;p&gt;The next difference with the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; is that I’ve declared some port bindings. These simply mean &lt;code class=&quot;highlighter-rouge&quot;&gt;listen to this port on the host:pass it to this port in the container&lt;/code&gt;. So any traffic that hits port 80 on my Pi will be forwarded to the nginx-proxy container’s port 80.&lt;/p&gt;

&lt;p&gt;The final difference is the volumes! Notably, you will see that I’ve mounted a special &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run/docker.sock:/tmp/docker.sock:ro&lt;/code&gt; volume, as well as some other named volumes like &lt;code class=&quot;highlighter-rouge&quot;&gt;html:/usr/share/nginx/html&lt;/code&gt;. The first volume is special as it allows communication between the container and the docker daemon running on the host, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;:ro&lt;/code&gt; specifies it is read-only.&lt;/p&gt;

&lt;p&gt;The named volume is similar to the ones we described earlier, but we’re letting docker decide where to store the volume on the host, and we’re giving it a name so that we may reference it later as you shall soon see. Note that named volumes need to be declared at the global level, as seen at the bottom of the compose file.&lt;/p&gt;
&lt;h2 id=&quot;lets-encrypt&quot;&gt;Let’s Encrypt&lt;/h2&gt;
&lt;p&gt;Finally, the magic that turns SSL on for all nginx-proxy sites.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;duckdns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nginx-proxy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;letsencrypt-nginx-proxy-companion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aidanstansfield/docker-letsencrypt-nginx-proxy-companion:arm32v7&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;le-nginx-proxy-companion&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unless-stopped&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/docker.sock:/var/run/docker.sock:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;certs:/etc/nginx/certs:rw&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vhost:/etc/nginx/vhost.d&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;html:/usr/share/nginx/html&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;conf:/etc/nginx/conf.d&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dhparam:/etc/nginx/dhparam&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEFAULT_EMAIL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aidan.stansfield@gmail.com&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;NGINX_PROXY_CONTAINER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nginx-proxy&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vhost&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dhparam&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;certs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This has nothing you haven’t seen before, but I’m including it for completeness sake. You’ll notice that again, I’m using an &lt;a href=&quot;https://github.com/aidanstansfield/docker-letsencrypt-nginx-proxy-companion&quot;&gt;image&lt;/a&gt; that I have built myself, based upon &lt;a href=&quot;https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion&quot;&gt;jrcs’ docker-letsencrypt-nginx-proxy-companion&lt;/a&gt;, so that it supports the arm32v7 architecture.&lt;/p&gt;

&lt;p&gt;Notice that we’re using the same named volumes as the nginx-proxy service, and that allows these two seperate services to both access the same files.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;So that’s how I run my DuckDNS, NGINX and Let’s Encrypt services on my Raspberry Pi with just a single &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;. Note that I never have to touch NGINX config files, or deal with setting up SSL, all I need to do is pass in an environment variable or two into any container I spin up and it’s all handled for me, &lt;strong&gt;how neat.&lt;/strong&gt; Hope you found some of this useful!&lt;/p&gt;</content><author><name></name></author><category term="raspberry" /><category term="pi" /><category term="nginx" /><category term="let's encrypt" /><category term="duckdns" /><summary type="html">So as I mentioned in my previous post, I wanted to use my Raspberry Pi as a webserver so that I could play around with web development projects. More specifically, I wanted to run NGINX, with autogenerated SSL certs from Let’s Encrypt, and I wanted a Dynamic DNS address so that I didn’t have to deal with changing IP addresses provided by my ISP. Oh, and I wanted this to all be described by one simple docker-compose.yml file.</summary></entry><entry><title type="html">The Raspberry Pi Project: Part 1 - The Context</title><link href="https://aidanstansfield.github.io/2020/03/14/raspi-p1.html" rel="alternate" type="text/html" title="The Raspberry Pi Project: Part 1 - The Context" /><published>2020-03-14T19:30:00+10:00</published><updated>2020-03-14T19:30:00+10:00</updated><id>https://aidanstansfield.github.io/2020/03/14/raspi-p1</id><content type="html" xml:base="https://aidanstansfield.github.io/2020/03/14/raspi-p1.html">&lt;p&gt;So I recently acquired a &lt;a href=&quot;https://core-electronics.com.au/raspberry-pi-4-model-b-4gb.html&quot;&gt;Raspberry Pi 4 with 4GB of RAM&lt;/a&gt; accompanied by a fantastic &lt;a href=&quot;https://core-electronics.com.au/flirc-raspberry-pi-4-case.html&quot;&gt;FLIRC case&lt;/a&gt; to replace my Raspberry Pi 3B+. Up until now, I had been using my Raspberry Pi 3B+ for a mix of things, including:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A web server running &lt;a href=&quot;https://www.nginx.com/&quot;&gt;NGINX&lt;/a&gt;, with automated SSL certs from &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; so I can serve cool web content I develop.&lt;/li&gt;
  &lt;li&gt;A DNS server running &lt;a href=&quot;https://pi-hole.net/&quot;&gt;Pihole&lt;/a&gt; to block ads on my network&lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://openvpn.net/&quot;&gt;OpenVPN&lt;/a&gt; server so I can VPN into my home network from wherever&lt;/li&gt;
  &lt;li&gt;A Dynamic DNS updater for &lt;a href=&quot;https://www.duckdns.org/&quot;&gt;DuckDNS&lt;/a&gt;, so I don’t have to deal with pesky IP addresses.&lt;/li&gt;
  &lt;li&gt;A development environment for various embedded systems projects that use the Pi’s GPIO pins.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So now comes the fun part of migrating all of these services over to the new Pi. Unfortuantely, since the Raspberry Pi 4 runs on a newer version of Raspbian (Buster), it’s not just a simple case of swapping over the SD cards and it all working.&lt;/p&gt;

&lt;p&gt;So I started thinking to myself,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;How can I make this migration/setup easier for the future?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer I eventually arrived at, &lt;strong&gt;Docker &amp;amp; Docker Compose.&lt;/strong&gt; The reason I decided upon this approach is that in the event that my SD card dies, or I want to setup a new SD card for X reason, all I should have to do is install the OS and Docker/Docker Compose, and then &lt;strong&gt;BAM&lt;/strong&gt; everything is up and running with a few &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;’s. Sounds easy, right?&lt;/p&gt;

&lt;p&gt;Well that’s what I thought when I set out on this journey, but boy did I have a few late nights. In this series, I plan to detail this journey, rabbit holes and source code included. Stay tuned!&lt;/p&gt;</content><author><name></name></author><category term="raspberry" /><category term="pi" /><category term="nginx" /><category term="lets encrypt" /><category term="openvpn" /><category term="duckdns" /><category term="pihole" /><summary type="html">So I recently acquired a Raspberry Pi 4 with 4GB of RAM accompanied by a fantastic FLIRC case to replace my Raspberry Pi 3B+. Up until now, I had been using my Raspberry Pi 3B+ for a mix of things, including: A web server running NGINX, with automated SSL certs from Let’s Encrypt so I can serve cool web content I develop. A DNS server running Pihole to block ads on my network An OpenVPN server so I can VPN into my home network from wherever A Dynamic DNS updater for DuckDNS, so I don’t have to deal with pesky IP addresses. A development environment for various embedded systems projects that use the Pi’s GPIO pins.</summary></entry><entry><title type="html">Welcome to my blog!</title><link href="https://aidanstansfield.github.io/2020/03/14/welcome-to-my-blog.html" rel="alternate" type="text/html" title="Welcome to my blog!" /><published>2020-03-14T14:26:00+10:00</published><updated>2020-03-14T14:26:00+10:00</updated><id>https://aidanstansfield.github.io/2020/03/14/welcome-to-my-blog</id><content type="html" xml:base="https://aidanstansfield.github.io/2020/03/14/welcome-to-my-blog.html">&lt;p&gt;G’day! Today marks the day that I finally became &lt;em&gt;one of those guys&lt;/em&gt; who has his own blog. The main reason for making this blog is so that I can show it off to other people (emplyers, friends, etc.). In this blog, I plan on documenting various things I do related to IT that I find interesting and worth sharing. You can expect this to include some home projects on my raspberry pi, walkthroughs of &lt;a href=&quot;https://hackthebox.eu&quot;&gt;hackthebox&lt;/a&gt;/ctf’s, and generally anything else I find cool. Also, I find myself funny, so please try not to cringe too hard at what I write/take offence from anything I say.&lt;/p&gt;

&lt;p&gt;For my first post, I figured I’d document how I made &lt;em&gt;this&lt;/em&gt;, the blog itself. The process I went through to set it up, and how I made it look so damn pretty.&lt;/p&gt;

&lt;h1 id=&quot;how-i-setup-my-blog&quot;&gt;How I setup my blog&lt;/h1&gt;
&lt;h2 id=&quot;intro-to-github-pages&quot;&gt;Intro to GitHub Pages&lt;/h2&gt;

&lt;p&gt;To start with, if you didn’t already know, this is running on a service called &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. Essentially, the quickstart is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You create a GitHub repo with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;$USERNAME.github.io&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;$USERNAME&lt;/code&gt; is your own GitHub username.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, you clone your repo.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/$USERNAME/$USERNAME.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add whatever HTML you want&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; echo &quot;Hello World&quot; &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push it&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git add -A
 git commit -m 'hello world'
 git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GitHub will automagically see your new commit, and in a short time, build and publish your code available for you to visit at your very own website https://$USERNAME.github.io&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How cool!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;intro-to-jekyll&quot;&gt;Intro to Jekyll&lt;/h2&gt;

&lt;p&gt;Ok so having GitHub build and host a plain old HTML site for you is kinda cool I guess, but nothing to write home about. What &lt;em&gt;is&lt;/em&gt; cool however is the combination of Jekyll and GitHub Pages. But what is Jekyll you ask?&lt;/p&gt;

&lt;p&gt;Jekyll is a static site generator with with built-in support for GitHub pages. Jekyll takes special Markdown and HTML files, and builds out a completely static website based upon them. For more about what Jekyll is and how it works, check out their &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use Jekyll with your own website:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First install Ruby, Bundler and Jekyll. For Debian based systems:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt update &amp;amp;&amp;amp; apt install ruby-full &amp;amp;&amp;amp; gem install bundler jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create your new Jekyll site inside your repositories folder&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; bundle exec jekyll new /path/to/repository
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to have GitHub Pages automagically build your Jekyll site for you, open up the Gemfile and follow the instructions within the comments of that file regarding GitHub Pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’d make sure all the dependencies are up to date with&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cd /path/to/repository &amp;amp;&amp;amp; bundle update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Push your new code and wait for it to build.&lt;/li&gt;
  &lt;li&gt;Congrats, you now have a cooler looking website that runs on Jekyll. To see all the benefits of using Jekyll, such as themes, templating, syntax highlighting and more, I’d encourage you again to check out their &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;website&lt;/a&gt;. I’d also recommend checking out how to build &amp;amp; serve your site locally for development purposes, as documented &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/testing-your-github-pages-site-locally-with-jekyll&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;making-jekyll-sexy&quot;&gt;Making Jekyll Sexy&lt;/h2&gt;
&lt;p&gt;If you’re following along with this post, you might be wondering why my Jekyll site looks cooler than the black and white default of Jekyll. The answer is &lt;em&gt;themes&lt;/em&gt;. After trolling through the interwebs for about an hour or so, I stumbled upon this theme that I really liked, called &lt;a href=&quot;https://github.com/bitbrain/jekyll-dash&quot;&gt;Jekyll Dash&lt;/a&gt;. I decided this would be the theme for my blog, so I went about setting it up. &lt;strong&gt;This is where the fun begins.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now in it’s current state, GitHub Pages is not capable of accepting user supplied plugins/gems to be installed as part of the build process, meaning that you cannot supply a theme (unless it’s one of the 13 supported themes) as follows in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-dash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GitHub’s workaround for this is to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;remote_theme&lt;/code&gt; option which allows you to use any theme available in a GitHub repository as shown.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;remote_theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bitbrain/jekyll-dash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This solved a lot of my problems, however the theme didn’t quite work as it did on &lt;a href=&quot;https://bitbrain.github.io&quot;&gt;Bitbrain’s blog&lt;/a&gt;. So I forked the the &lt;a href=&quot;https://github.com/bitbrain/jekyll-dash&quot;&gt;Jekyll Dash&lt;/a&gt; repo and started customizing the theme to make it look the way it was supposed to.&lt;/p&gt;

&lt;p&gt;This solved the majority of problems, except for the fact that you still couldn’t supply your own plugins to be used as part of the build process for the site. In this case, the jekyll-dash theme used a &lt;code class=&quot;highlighter-rouge&quot;&gt;liquid-md5&lt;/code&gt; plugin to help support Gravatar image URL’s.&lt;/p&gt;

&lt;p&gt;So after a bit of researching, I decided the best approach would be to build the site locally (that way I could use whatever plugins I pleased), and then push the result to GitHub for free hosting. Here’s how I achieved this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new branch called ‘source’. Since the repository is what GitHub terms a “user” site and not a “project” site, the only publishing source available is the master branch. This means that the code GitHub will build and publish will be taken from the master branch, so we will need another branch to store the source code for building our blog! &lt;strong&gt;NOTE:&lt;/strong&gt; If you do this, I would recommend changing the default branch of your repo to ‘source’!
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git checkout -b source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://github.com/yegor256/jekyll-github-deploy&quot;&gt;jgd&lt;/a&gt;. Jekyll-Github-Deploy (jgd) is a tool that will build your Jekyll site and push it to GitHub for you.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; gem install jgd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Build your site from the source branch and push it to the master branch!
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; bundle exec jgd --branch master --branch-from source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Enjoy the freedom of plugins with Jekyll!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;So, welcome to my blog! I briefly described how I set up my own blog with Jekyll and GitHub Pages, using whatever plugins/themes I wanted. All the source code for this blog (both master and source branch) is available &lt;a href=&quot;https://github.com/aidanstansfield/aidanstansfield.github.io&quot;&gt;here&lt;/a&gt;. Hope you enjoyed!&lt;/p&gt;</content><author><name></name></author><summary type="html">G’day! Today marks the day that I finally became one of those guys who has his own blog. The main reason for making this blog is so that I can show it off to other people (emplyers, friends, etc.). In this blog, I plan on documenting various things I do related to IT that I find interesting and worth sharing. You can expect this to include some home projects on my raspberry pi, walkthroughs of hackthebox/ctf’s, and generally anything else I find cool. Also, I find myself funny, so please try not to cringe too hard at what I write/take offence from anything I say.</summary></entry></feed>